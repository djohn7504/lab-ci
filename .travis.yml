sudo: false

dist: trusty

branches:
  only:
    - master									# <-------- prévient un re-build, si deploy.releases !

env:
  global:
    - TAG_TARGET='release-test'
#   - TAG_LIST=`git ls-remote --tags release-test`
#    - TAG_LIST=`git ls-remote --tags ./release-test`
#    - TAG_EXIST=`git tag --verify release-test`
    - TAG_EXIST=`git rev-parse release-test`

script: echo "build $TRAVIS_BUILD_NUMBER" >> deploy/index.html

#	si existe pas ?..
before_deploy:
# - echo "$TAG_LIST"
  - echo "$TAG_EXIST"
# - if [ -n "$TAG_LIST" ]; then echo "OK"; else echo "NOT FOUND TAG"; fi
#  - if [ -n "$TAG_LIST" ]; then git checkout "$TAG_TARGET"; else echo "NOT FOUND TAG"; fi
  - if [ "$TAG_EXIST" ]; then git checkout "$TAG_TARGET"; else echo "NOT EXIST"; fi
  
#  - git checkout "$TAG_TARGET"					# <-------- aller dans la bonne branche..

#  - if [ git ls-remote --tags "$TAG_TARGET" ];
#  - |
#   if [ -n `git ls-remote --tags "$TAG_TARGET"` ];
#    if [ -n "$TAG_LIST" ];
#    then
#      git checkout "$TAG_TARGET";					# <-------- aller dans la bonne branche..
#    else
#      echo "NOT FOUND TAG $TAG_TARGET !!!!!!!!!!!!!!!!";
#    fi




deploy:
  - provider: releases
    on:
      branch: master
    api-key:
      - secure: $GITHUB_TOKEN
    skip-cleanup: true
    file: deploy/index.html

    tag_name: $TAG_TARGET						# <-------- cible du déploiement
    overwrite: true								# <-------- écrase les fichiers du tag existant !

    verbose: true

# utile ?..
after_deploy:
  - git checkout "master"

